{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"csvreader\",\r\n    displayName: \"CSV Reader Broker\",\r\n    description: \"A broker that reads a CSV file and returns each line as a list.\",\r\n    configuration: {\r\n        \"FirstRowIsHeader\": {\r\n            displayName: \"First Row Is Header\",\r\n            type: \"boolean\",\r\n            value: true\r\n        },\r\n        \"LineSplitChar\": {\r\n            displayName: \"Line Split Character\",\r\n            type: \"string\",\r\n            value: \"newline\"\r\n        }\r\n    }\r\n};\r\n\r\nondescribe = async function({configuration}): Promise<void> {\r\n    postSchema({\r\n        objects: {\r\n            \"lines\": {\r\n                displayName: \"Lines\",\r\n                description: \"Describes all lines in a CSV file\",\r\n                properties: {\r\n                    \"fileContent\": {\r\n                        displayName: \"File Content\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"line\": {\r\n                        displayName: \"Line\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    \"getLines\": {\r\n                        displayName: \"Get Lines\",\r\n                        type: \"list\",\r\n                        inputs: [ \"fileContent\" ],\r\n                        outputs: [ \"line\" ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\r\n    switch (objectName)\r\n    {\r\n        case \"lines\": await onexecuteSplit(methodName, properties, configuration); break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteSplit(methodName: string, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    switch (methodName)\r\n    {\r\n        case \"getLines\": await onexecuteLinesSplit(properties, configuration); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteLinesSplit(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) =>\r\n    {\r\n            try {\r\n                const str = Base64.decode(getBase64FromContent(properties[\"fileContent\"].toString()));\r\n                var lines = [];\r\n                \r\n                if (configuration[\"LineSplitChar\"].toString() == \"newline\")\r\n                {\r\n                    lines = str.split(/\\r?\\n/);\r\n                }\r\n                else\r\n                {\r\n                    lines = str.split(configuration[\"LineSplitChar\"].toString());\r\n                }\r\n                \r\n                var lineObj = [];\r\n\r\n                var startIndex = configuration[\"FirstRowIsHeader\"] ? 1 : 0;\r\n\r\n                for (let index = startIndex; index < lines.length; index++) {\r\n                    lineObj.push({ line: lines[index] });                    \r\n                }\r\n\r\n                postResult(lineObj.map(x => {\r\n                    return {\r\n                        \"line\": x.line }}));\r\n\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }        \r\n    });\r\n}\r\n\r\nfunction getBase64FromContent(content: string)\r\n{\r\n    var base64 = \"\";\r\n\r\n    var split1 = content.split(\"<content>\")[1];\r\n    base64 = split1.split(\"</content>\")[0];\r\n\r\n    return base64;\r\n}\r\n\r\nvar Base64 = {\r\n\r\n    // private property\r\n    _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n    \r\n    // public method for encoding\r\n    encode : function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n    \r\n        input = Base64._utf8_encode(input);\r\n    \r\n        while (i < input.length) {\r\n    \r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n    \r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n    \r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n    \r\n            output = output +\r\n            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n    \r\n        }\r\n    \r\n        return output;\r\n    },\r\n    \r\n    // public method for decoding\r\n    decode : function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n    \r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n    \r\n        while (i < input.length) {\r\n    \r\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\r\n    \r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n    \r\n            output = output + String.fromCharCode(chr1);\r\n    \r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n    \r\n        }\r\n    \r\n        output = Base64._utf8_decode(output);\r\n    \r\n        return output;\r\n    \r\n    },\r\n    \r\n    // private method for UTF-8 encoding\r\n    _utf8_encode : function (string) {\r\n        string = string.replace(/\\r\\n/g,\"\\n\");\r\n        var utftext = \"\";\r\n    \r\n        for (var n = 0; n < string.length; n++) {\r\n    \r\n            var c = string.charCodeAt(n);\r\n    \r\n            if (c < 128) {\r\n                utftext += String.fromCharCode(c);\r\n            }\r\n            else if((c > 127) && (c < 2048)) {\r\n                utftext += String.fromCharCode((c >> 6) | 192);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n            else {\r\n                utftext += String.fromCharCode((c >> 12) | 224);\r\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n    \r\n        }\r\n    \r\n        return utftext;\r\n    },\r\n    \r\n    // private method for UTF-8 decoding\r\n    _utf8_decode : function (utftext) {\r\n        var string = \"\";\r\n        var i = 0;\r\n        var c = 0, c1 = 0, c2 = 0, c3 = 0;\r\n    \r\n        while ( i < utftext.length ) {\r\n    \r\n            c = utftext.charCodeAt(i);\r\n    \r\n            if (c < 128) {\r\n                string += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if((c > 191) && (c < 224)) {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                c3 = utftext.charCodeAt(i+2);\r\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n    \r\n        }\r\n    \r\n        return string;\r\n    }\r\n    \r\n    }"],"names":["metadata","systemName","displayName","description","configuration","type","value","ondescribe","async","postSchema","objects","properties","methods","inputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","str","Base64","decode","content","toString","split","lines","lineObj","index","length","push","line","postResult","map","x","e","onexecuteLinesSplit","Error","onexecuteSplit","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","_utf8_encode","charCodeAt","isNaN","this","charAt","replace","indexOf","String","fromCharCode","_utf8_decode","string","utftext","n","c","c2","c3"],"mappings":"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"}