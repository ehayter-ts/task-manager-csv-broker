{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"TaskManagerCSVReader\",\r\n    displayName: \"Task Manager CSV Reader Broker\",\r\n    description: \"A broker that reads a CSV file and returns the info for use in the Task Manager Application.\",\r\n    configuration: {\r\n        \"FirstRowIsHeader\": {\r\n            displayName: \"First Row Is Header\",\r\n            type: \"boolean\",\r\n            value: true\r\n        },\r\n        \"LineSplitChar\": {\r\n            displayName: \"Line Split Character\",\r\n            type: \"string\",\r\n            value: \"newline\"\r\n        },\r\n        \"FieldSplitChar\": {\r\n            displayName: \"Field Split Character\",\r\n            type: \"string\",\r\n            value: \";\"\r\n        }\r\n    }\r\n};\r\n\r\n//INTERNAL REFERENCE;CATEGORY;PRIORITY;ASSIGNED TO;SUBJECT;DESCRIPTION;TASK DUE DATE\r\nondescribe = async function ({ configuration }): Promise<void> {\r\n    postSchema({\r\n        objects: {\r\n            \"tasks\": {\r\n                displayName: \"Tasks\",\r\n                description: \"Describes all tasks in a CSV file\",\r\n                properties: {\r\n                    \"fileContent\": {\r\n                        displayName: \"File Content\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"id\": {\r\n                        displayName: \"ID\",\r\n                        type: \"number\"\r\n                    },\r\n                    \"reference\": {\r\n                        displayName: \"Internal Reference\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"category\": {\r\n                        displayName: \"Category\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"priority\": {\r\n                        displayName: \"Priority\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"assignedTo\": {\r\n                        displayName: \"Assigned To\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"subject\": {\r\n                        displayName: \"Subject\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"description\": {\r\n                        displayName: \"Description\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"dueDate\": {\r\n                        displayName: \"Task Due Date\",\r\n                        type: \"dateTime\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    \"getTasks\": {\r\n                        displayName: \"Get Tasks\",\r\n                        type: \"list\",\r\n                        inputs: [\"fileContent\"],\r\n                        outputs: [\"id\", \"reference\", \"category\", \"priority\", \"assignedTo\", \"subject\", \"description\", \"dueDate\"]\r\n                    },\r\n                    \"getTask\": {\r\n                        displayName: \"Get Task\",\r\n                        type: \"read\",\r\n                        inputs: [\"fileContent\", \"id\"],\r\n                        outputs: [\"id\", \"reference\", \"category\", \"priority\", \"assignedTo\", \"subject\", \"description\", \"dueDate\"]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nonexecute = async function ({ objectName, methodName, parameters, properties, configuration, schema }): Promise<void> {\r\n    switch (objectName) {\r\n        case \"tasks\": await onexecuteSplit(methodName, properties, configuration); break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteSplit(methodName: string, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    switch (methodName) {\r\n        case \"getTasks\": await onexecuteGetTasks(properties, configuration); break;\r\n        case \"getTask\": await onexecuteGetTask(properties, configuration); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteGetTasks(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        try {\r\n            const str = Base64.decode(getBase64FromContent(properties[\"fileContent\"].toString()));\r\n            var lines = [];\r\n\r\n            if (configuration[\"LineSplitChar\"].toString() == \"newline\") {\r\n                lines = str.split(/\\r?\\n/);\r\n            }\r\n            else {\r\n                lines = str.split(configuration[\"LineSplitChar\"].toString());\r\n            }\r\n\r\n            var lineObj = [];\r\n\r\n            var startIndex = configuration[\"FirstRowIsHeader\"] ? 1 : 0;\r\n\r\n            for (let index = startIndex; index < lines.length; index++) {\r\n                var line = lines[index].split(configuration[\"FieldSplitChar\"].toString());\r\n\r\n                lineObj.push({\r\n                    id: index,\r\n                    reference: line[0],\r\n                    category: line[1],\r\n                    priority: line[2],\r\n                    assignedTo: line[3],\r\n                    subject: line[4],\r\n                    description: line[5],\r\n                    dueDate: line[6]\r\n                });\r\n            }\r\n\r\n            postResult(lineObj.map(x => {\r\n                return {\r\n                    \"id\": x.id,\r\n                    \"reference\": x.reference,\r\n                    \"category\": x.category,\r\n                    \"priority\": x.priority,\r\n                    \"assignedTo\": x.assignedTo,\r\n                    \"subject\": x.subject,\r\n                    \"description\": x.description,\r\n                    \"dueDate\": Date.parse(x.dueDate)\r\n                }\r\n            }));\r\n\r\n            resolve();\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n\r\nfunction onexecuteGetTask(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        try {\r\n            const str = Base64.decode(getBase64FromContent(properties[\"fileContent\"].toString()));\r\n            var lines = [];\r\n\r\n            if (configuration[\"LineSplitChar\"].toString() == \"newline\") {\r\n                lines = str.split(/\\r?\\n/);\r\n            }\r\n            else {\r\n                lines = str.split(configuration[\"LineSplitChar\"].toString());\r\n            }\r\n\r\n            var id = parseInt(properties[\"id\"].toString());\r\n            var line = lines[id].split(configuration[\"FieldSplitChar\"].toString());\r\n\r\n            var lineObj = {\r\n                id: id,\r\n                reference: line[0],\r\n                category: line[1],\r\n                priority: line[2],\r\n                assignedTo: line[3],\r\n                subject: line[4],\r\n                description: line[5],\r\n                dueDate: line[6]\r\n            };\r\n\r\n            postResult({\r\n                    \"reference\": lineObj.reference,\r\n                    \"category\": lineObj.category,\r\n                    \"priority\": lineObj.priority,\r\n                    \"assignedTo\": lineObj.assignedTo,\r\n                    \"subject\": lineObj.subject,\r\n                    \"description\": lineObj.description,\r\n                    \"dueDate\": Date.parse(lineObj.dueDate)\r\n                }\r\n            );\r\n\r\n            resolve();\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n\r\nfunction getBase64FromContent(content: string) {\r\n    var base64 = \"\";\r\n\r\n    var split1 = content.split(\"<content>\")[1];\r\n    base64 = split1.split(\"</content>\")[0];\r\n\r\n    return base64;\r\n}\r\n\r\nvar Base64 = {\r\n\r\n    // private property\r\n    _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n\r\n    // public method for encoding\r\n    encode: function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n\r\n        input = Base64._utf8_encode(input);\r\n\r\n        while (i < input.length) {\r\n\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            output = output +\r\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    // public method for decoding\r\n    decode: function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n        while (i < input.length) {\r\n\r\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\r\n\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n            output = output + String.fromCharCode(chr1);\r\n\r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n\r\n        }\r\n\r\n        output = Base64._utf8_decode(output);\r\n\r\n        return output;\r\n\r\n    },\r\n\r\n    // private method for UTF-8 encoding\r\n    _utf8_encode: function (string) {\r\n        string = string.replace(/\\r\\n/g, \"\\n\");\r\n        var utftext = \"\";\r\n\r\n        for (var n = 0; n < string.length; n++) {\r\n\r\n            var c = string.charCodeAt(n);\r\n\r\n            if (c < 128) {\r\n                utftext += String.fromCharCode(c);\r\n            }\r\n            else if ((c > 127) && (c < 2048)) {\r\n                utftext += String.fromCharCode((c >> 6) | 192);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n            else {\r\n                utftext += String.fromCharCode((c >> 12) | 224);\r\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n\r\n        }\r\n\r\n        return utftext;\r\n    },\r\n\r\n    // private method for UTF-8 decoding\r\n    _utf8_decode: function (utftext) {\r\n        var string = \"\";\r\n        var i = 0;\r\n        var c = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n        while (i < utftext.length) {\r\n\r\n            c = utftext.charCodeAt(i);\r\n\r\n            if (c < 128) {\r\n                string += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = utftext.charCodeAt(i + 1);\r\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = utftext.charCodeAt(i + 1);\r\n                c3 = utftext.charCodeAt(i + 2);\r\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n\r\n        }\r\n\r\n        return string;\r\n    }\r\n\r\n}"],"names":["getBase64FromContent","content","split","metadata","systemName","displayName","description","configuration","type","value","ondescribe","async","postSchema","objects","properties","methods","inputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","str","Base64","decode","toString","lines","lineObj","index","length","line","push","id","reference","category","priority","assignedTo","subject","dueDate","postResult","map","x","Date","parse","e","onexecuteGetTasks","parseInt","onexecuteGetTask","Error","onexecuteSplit","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","_utf8_encode","charCodeAt","isNaN","this","charAt","replace","indexOf","String","fromCharCode","_utf8_decode","string","utftext","n","c","c2","c3"],"mappings":"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"}