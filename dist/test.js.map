{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\r\nimport '@k2oss/k2-broker-core/test-framework';\r\nimport './index';\r\n\r\nfunction mock(name: string, value: any) \r\n{\r\n    global[name] = value;\r\n}\r\n\r\ntest('describe returns the hardcoded instance', async t => {\r\n    let schema = null;\r\n    mock('postSchema', function(result: any) {\r\n        schema = result;\r\n    });\r\n\r\n    await Promise.resolve<void>(ondescribe({\r\n        configuration: {}\r\n    }));\r\n    \r\n    t.deepEqual(schema, {\r\n        objects: {\r\n            \"lines\": {\r\n                displayName: \"Lines\",\r\n                description: \"Describes all lines in a CSV file\",\r\n                properties: {\r\n                    \"file\": {\r\n                        displayName: \"File\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"line\": {\r\n                        displayName: \"Line\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    \"getLines\": {\r\n                        displayName: \"Get Lines\",\r\n                        type: \"read\",\r\n                        inputs: [ \"file\" ],\r\n                        outputs: [ \"line\" ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest('execute fails with the wrong parameters', async t => {\r\n    let error = await t.throwsAsync(Promise.resolve<void>(onexecute({\r\n        objectName: 'test1',\r\n        methodName: 'unused',\r\n        parameters: {},\r\n        properties: {},\r\n        configuration: {},\r\n        schema: {}\r\n    })));\r\n    \r\n    t.deepEqual(error.message, 'The object test1 is not supported.');\r\n\r\n    error = await t.throwsAsync(Promise.resolve<void>(onexecute({\r\n        objectName: 'lines',\r\n        methodName: 'test2',\r\n        parameters: {},\r\n        properties: {},\r\n        configuration: {},\r\n        schema: {}\r\n    })));\r\n    \r\n    t.deepEqual(error.message, 'The method test2 is not supported.');\r\n\r\n    t.pass();\r\n});"],"names":["test","async","schema","value","result","global","Promise","resolve","ondescribe","configuration","t","deepEqual","objects","displayName","description","properties","type","methods","inputs","outputs","pass","error","throwsAsync","onexecute","objectName","methodName","parameters","message"],"mappings":"0JASAA,EAAK,0CAA2CC,MAAAA,QACxCC,EAAS,KANjB,IAA4BC,EAAAA,EAOL,SAASC,GACxBF,EAASE,GANbC,OAKK,cALUF,QASTG,QAAQC,QAAcC,WAAW,CACnCC,cAAe,MAGnBC,EAAEC,UAAUT,EAAQ,CAChBU,QAAS,OACI,CACLC,YAAa,QACbC,YAAa,oCACbC,WAAY,MACA,CACJF,YAAa,OACbG,KAAM,eAEF,CACJH,YAAa,OACbG,KAAM,WAGdC,QAAS,UACO,CACRJ,YAAa,YACbG,KAAM,OACNE,OAAQ,CAAE,QACVC,QAAS,CAAE,cAO/BT,EAAEU,SAGNpB,EAAK,0CAA2CC,MAAAA,QACxCoB,QAAcX,EAAEY,YAAYhB,QAAQC,QAAcgB,UAAU,CAC5DC,WAAY,QACZC,WAAY,SACZC,WAAY,GACZX,WAAY,GACZN,cAAe,GACfP,OAAQ,OAGZQ,EAAEC,UAAUU,EAAMM,QAAS,sCAE3BN,QAAcX,EAAEY,YAAYhB,QAAQC,QAAcgB,UAAU,CACxDC,WAAY,QACZC,WAAY,QACZC,WAAY,GACZX,WAAY,GACZN,cAAe,GACfP,OAAQ,OAGZQ,EAAEC,UAAUU,EAAMM,QAAS,sCAE3BjB,EAAEU"}